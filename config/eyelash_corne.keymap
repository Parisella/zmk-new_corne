#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

/ {
    behaviors {
        td0: td0 {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp T>, <&kp F1>;

            tapping-term-ms = <2>;
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    combos {
        compatible = "zmk,combos";

        Home {
            bindings = <&kp HOME>;
            key-positions = <8 9 10>;
        };

        Ampersand {
            bindings = <&kp AMPERSAND>;
            key-positions = <22 24>;
        };

        Hashtag {
            bindings = <&kp POUND>;
            key-positions = <7 8 9>;
        };

        Asterix {
            bindings = <&kp ASTRK>;
            key-positions = <36 37 38>;
        };

        ScrollUp_L {
            bindings = <&msc SCRL_UP>;
            key-positions = <17 14>;
        };

        ScrollDown_L {
            bindings = <&msc SCRL_DOWN>;
            key-positions = <32 29>;
        };

        leftParenthesis {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <23 46>;
        };

        rightParenthesis {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <46 24>;
        };

        leftBracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <8 46>;
        };

        rightBracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <46 9>;
        };

        rightCurly {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <46 37>;
        };

        leftBrace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <37 46>;
        };

        Enter {
            bindings = <&kp ENTER>;
            key-positions = <16 15 17>;
        };

        f1 {
            bindings = <&kp F1>;
            key-positions = <5 4>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <16 17>;
        };

        f2 {
            bindings = <&kp F2>;
            key-positions = <4 3>;
        };

        f3 {
            bindings = <&kp F3>;
            key-positions = <3 2>;
        };

        f3 {
            bindings = <&kp F4>;
            key-positions = <2 1>;
        };

        f5 {
            bindings = <&kp F5>;
            key-positions = <18 17>;
        };

        f6 {
            bindings = <&kp F6>;
            key-positions = <17 16>;
        };

        f7 {
            bindings = <&kp F7>;
            key-positions = <16 15>;
        };

        f8 {
            bindings = <&kp F8>;
            key-positions = <15 14>;
        };

        f9 {
            bindings = <&kp F9>;
            key-positions = <33 32>;
        };

        f10 {
            bindings = <&kp F10>;
            key-positions = <32 31>;
        };

        f11 {
            bindings = <&kp F11>;
            key-positions = <31 30>;
        };

        f12 {
            bindings = <&kp F12>;
            key-positions = <30 29>;
        };
    };

    macros {
        new_macro: new_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none>;
            label = "NEW_MACRO";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "QWERTY";
            bindings = <
&kp ESCAPE      &kp Q  &kp W  &kp E  &kp R         &kp T                                   &mmv MOVE_UP                     &kp Y      &kp U          &kp I      &kp O    &kp P     &kp ESCAPE
&kp LEFT_SHIFT  &kp A  &kp S  &kp D  &kp F         &kp G                   &mmv MOVE_LEFT  &mkp MB3        &mmv MOVE_RIGHT  &kp H      &kp J          &kp K      &kp L    &kp SEMI  &kp RIGHT_SHIFT
&kp LEFT_GUI    &kp Z  &kp X  &kp C  &kp V         &kp B      &kp SPACE                    &mmv MOVE_DOWN                   &kp N      &kp M          &kp COMMA  &kp DOT  &kp FSLH  &kp LEFT_WIN
                              &mo 1  &kp LEFT_ALT  &kp LCTRL                                                                &kp SPACE  &kp BACKSPACE  &kp LCTRL
            >;

            sensor-bindings = <&inc_dec_kp UP_ARROW DOWN_ARROW>;
        };

        Numbers {
            bindings = <
&trans  &kp N7        &kp N8        &kp N9        &kp KP_PLUS   &trans                    &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp KP_MINUS  &trans            &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&tog 0  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp EQUAL     &trans  &trans            &trans          &trans  &trans  &trans  &trans  &trans  &trans
                                    &trans        &tog 0        &trans                                    &trans  &trans  &trans
            >;
        };
    };
};
